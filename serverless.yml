# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: golfscores

frameworkVersion: ">=1.2.0 <2.0.0"

provider:
  name: aws
  runtime: nodejs4.3
  stage: dev
  region: ap-southeast-2  
  environment: # Service wide environment variables
    optStage: ${opt:stage, self:provider.stage}

functions:
  creategame:
    handler: handler.creategame
    environment: # Service wide environment variables
      STAGE: ${opt:stage, self:provider.stage} 
    events: 
    - http:
        path: game/{user}
        method: post
  getgamescore:
    handler: handler.getgamescore
    environment: # Service wide environment variables
      stage: ${opt:stage, self:provider.stage}
    events: 
    - http:
        path: game/score/{gameId}
        method: get
        integration: lambda
        request:
          parameters:
            paths:
              gameId: true
  setscore:
    handler: handler.setscore
    environment: # Service wide environment variables
      stage: ${opt:stage, self:provider.stage}    
    events: 
    - http:
        path: game/score/{gameId}/{user}/{hole}/{score}
        method: put    
        integration: lambda
        request:
          parameters:
            paths:
              gameId: true
              user: true
              hole: true
              score: true      

#      - s3: ${env.BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic

resources:  
  Resources:
    DynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage, self:provider.stage}-game-table
        AttributeDefinitions:
          - AttributeName: gameId
            AttributeType: S
          - AttributeName: userandhole
            AttributeType: S
        KeySchema:
          - AttributeName: gameId
            KeyType: HASH
          - AttributeName: userandhole
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    DynamoDBIamPolicy:
      Type: AWS::IAM::Policy
      DependsOn: DynamoDbTable
      Properties:
        PolicyName: lambda-dynamodb
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
              Resource: arn:aws:dynamodb:*:*:table/${opt:stage, self:provider.stage}-game-table
        Roles:
          - Ref: IamRoleLambdaExecution